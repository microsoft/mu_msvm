name: Build UEFI Firmware

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  build:
    runs-on: windows-latest

    strategy:
      matrix:
        target: [DEBUG, RELEASE]
        arch: [X64, AARCH64]

    steps:
      # Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Set up Python 3.12
      - name: Set up Python 3.12
        uses: actions/setup-python@v3
        with:
          python-version: '3.12'

      # Install Python dependencies from pip_requirement_stable.txt
      - name: Install Python Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r pip_requirement_stable.txt

      # Enable long paths in Git configuration (Windows)
      - name: Enable Long Paths
        run: |
          git config --system core.longpaths true

      # Check if required Visual Studio components are installed
      - name: Find Visual Studio Installation with Required Components
        shell: pwsh
        run: |
          $requiredComponents = @(
            "Microsoft.VisualStudio.Component.VC.Tools.x86.x64",
            "Microsoft.VisualStudio.Component.Windows11SDK.22621",
            "Microsoft.VisualStudio.Component.VC.Tools.ARM",
            "Microsoft.VisualStudio.Component.VC.Tools.ARM64"
          )
          $vsPath = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -products * -property installationPath
          if (-not $vsPath) { throw "Visual Studio is not installed." }

          # Check for each required component
          foreach ($component in $requiredComponents) {
            $componentInstalled = &"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires $component -property installationPath
            if (-not $componentInstalled) {
              throw "Required component $component is missing. Please install the necessary components."
            }
          }

          Write-Host "All required Visual Studio components are installed."

      # Stuart Setup: Initialize the build environment
      - name: Stuart Setup
        run: |
          stuart_setup -c MsvmPkg/PlatformBuild.py TOOL_CHAIN_TAG=VS2022

      # Stuart Update: Update the build environment
      - name: Stuart Update
        run: |
          stuart_update -c MsvmPkg/PlatformBuild.py TOOL_CHAIN_TAG=VS2022

      # Stuart Build: Perform the build using the specified architecture and target
      - name: Stuart Build
        run: |
          stuart_build -c MsvmPkg/PlatformBuild.py TOOL_CHAIN_TAG=VS2022 TARGET=${{ matrix.target }} BUILD_ARCH=${{ matrix.arch }}

      # Upload the MSVM.fd file, MAP/, and PDB/ directories directly as an artifact
      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.target }}-${{ matrix.arch }}-artifacts
          path: |
            Build/Msvm${{ matrix.arch }}/${{ matrix.target }}_VS2022/FV/MSVM.fd
            Build/Msvm${{ matrix.arch }}/${{ matrix.target }}_VS2022/MAP/
            Build/Msvm${{ matrix.arch }}/${{ matrix.target }}_VS2022/PDB/